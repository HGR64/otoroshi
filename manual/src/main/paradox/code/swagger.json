{
  "swagger" : "2.0",
  "info" : {
    "version" : "1.2.0-dev",
    "title" : "Otoroshi Admin API",
    "description" : "Admin API of the Otoroshi reverse proxy",
    "contact" : {
      "name" : "Otoroshi Team",
      "email" : "oss@maif.fr"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags" : [ {
    "name" : "configuration",
    "description" : "Everything about Otoroshi global configuration"
  }, {
    "name" : "import",
    "description" : "Everything about Otoroshi import/export"
  }, {
    "name" : "templates",
    "description" : "Everything about Otoroshi entities templates"
  }, {
    "name" : "environments",
    "description" : "Everything about Otoroshi Environments"
  }, {
    "name" : "groups",
    "description" : "Everything about Otoroshi service groups"
  }, {
    "name" : "apikeys",
    "description" : "Everything about Otoroshi api keys"
  }, {
    "name" : "services",
    "description" : "Everything about Otoroshi service descriptors"
  }, {
    "name" : "stats",
    "description" : "Everything about Otoroshi stats"
  } ],
  "externalDocs" : {
    "description" : "Find out more about Otoroshi",
    "url" : "https://maif.github.io/otoroshi/"
  },
  "host" : "otoroshi-api.dev.opunmaif.fr",
  "basePath" : "/api",
  "schemes" : [ "http" ],
  "paths" : {
    "/new/apikey" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "templates" ],
        "summary" : "Get a template of an Otoroshi Api Key",
        "description" : "Get a template of an Otoroshi Api Key. The generated entity is not persisted",
        "operationId" : "initiateApiKey",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiKey"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/new/service" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "templates" ],
        "summary" : "Get a template of an Otoroshi service descriptor",
        "description" : "Get a template of an Otoroshi service descriptor. The generated entity is not persisted",
        "operationId" : "initiateService",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Service"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/new/group" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "templates" ],
        "summary" : "Get a template of an Otoroshi service group",
        "description" : "Get a template of an Otoroshi service group. The generated entity is not persisted",
        "operationId" : "initiateServiceGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Group"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/lines" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "environments" ],
        "summary" : "Get all environments",
        "description" : "Get all environments provided by the current Otoroshi instance",
        "operationId" : "allLines",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Environment"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/lines/{line}/services" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "environments" ],
        "summary" : "Get all services for an environment",
        "description" : "Get all services for an environment provided by the current Otoroshi instance",
        "operationId" : "servicesForALine",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "line",
          "required" : true,
          "type" : "string",
          "description" : "The environment where to find services"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Service"
              }
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/services/{serviceId}/apikeys/{clientId}/quotas" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Get the quota state of an api key",
        "description" : "Get the quota state of an api key",
        "operationId" : "apiKeyQuotas",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The api key service id"
        }, {
          "in" : "path",
          "name" : "clientId",
          "required" : true,
          "type" : "string",
          "description" : "the api key id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Quotas"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "delete" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Reset the quota state of an api key",
        "description" : "Reset the quota state of an api key",
        "operationId" : "resetApiKeyQuotas",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The api key service id"
        }, {
          "in" : "path",
          "name" : "clientId",
          "required" : true,
          "type" : "string",
          "description" : "the api key id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Quotas"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/services/{serviceId}/apikeys/{clientId}/group" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Get the group of an api key",
        "description" : "Get the group of an api key",
        "operationId" : "apiKeyGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The api key service id"
        }, {
          "in" : "path",
          "name" : "clientId",
          "required" : true,
          "type" : "string",
          "description" : "the api key id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Group"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/services/{serviceId}/apikeys/{clientId}" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Get an api key",
        "description" : "Get an api key for a specified service descriptor",
        "operationId" : "apiKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The api key service id"
        }, {
          "in" : "path",
          "name" : "clientId",
          "required" : true,
          "type" : "string",
          "description" : "the api key id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiKey"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "put" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Update an api key",
        "description" : "Update an api key for a specified service descriptor",
        "operationId" : "updateApiKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The api key service id"
        }, {
          "in" : "path",
          "name" : "clientId",
          "required" : true,
          "type" : "string",
          "description" : "the api key id"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApiKey"
          },
          "description" : "The updated api key"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiKey"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "patch" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Update an api key with a diff",
        "description" : "Update an api key for a specified service descriptor with a diff",
        "operationId" : "patchApiKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The api key service id"
        }, {
          "in" : "path",
          "name" : "clientId",
          "required" : true,
          "type" : "string",
          "description" : "the api key id"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Patch"
          },
          "description" : "The patch for the api key"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiKey"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "delete" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Delete an api key",
        "description" : "Delete an api key for a specified service descriptor",
        "operationId" : "deleteApiKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The api key service id"
        }, {
          "in" : "path",
          "name" : "clientId",
          "required" : true,
          "type" : "string",
          "description" : "the api key id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Deleted"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/services/{serviceId}/apikeys" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Get all api keys for the group of a service",
        "description" : "Get all api keys for the group of a service",
        "operationId" : "apiKeys",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The api key service id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ApiKey"
              }
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "post" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Create a new api key for a service",
        "description" : "Create a new api key for a service",
        "operationId" : "createApiKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The api key service id"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApiKey"
          },
          "description" : "The api key to create"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiKey"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/groups/{groupId}/apikeys/{clientId}/quotas" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Get the quota state of an api key",
        "description" : "Get the quota state of an api key",
        "operationId" : "apiKeyFromGroupQuotas",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "type" : "string",
          "description" : "The api key group id"
        }, {
          "in" : "path",
          "name" : "clientId",
          "required" : true,
          "type" : "string",
          "description" : "the api key id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Quotas"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "delete" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Reset the quota state of an api key",
        "description" : "Reset the quota state of an api key",
        "operationId" : "resetApiKeyFromGroupQuotas",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "type" : "string",
          "description" : "The api key group id"
        }, {
          "in" : "path",
          "name" : "clientId",
          "required" : true,
          "type" : "string",
          "description" : "the api key id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Quotas"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/groups/{groupId}/apikeys/{clientId}" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Get an api key",
        "description" : "Get an api key for a specified service group",
        "operationId" : "apiKeyFromGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "type" : "string",
          "description" : "The api key group id"
        }, {
          "in" : "path",
          "name" : "clientId",
          "required" : true,
          "type" : "string",
          "description" : "the api key id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiKey"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "put" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Update an api key",
        "description" : "Update an api key for a specified service group",
        "operationId" : "updateApiKeyFromGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "type" : "string",
          "description" : "The api key group id"
        }, {
          "in" : "path",
          "name" : "clientId",
          "required" : true,
          "type" : "string",
          "description" : "the api key id"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApiKey"
          },
          "description" : "The updated api key"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiKey"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "patch" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Update an api key with a diff",
        "description" : "Update an api key for a specified service descriptor with a diff",
        "operationId" : "patchApiKeyFromGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "type" : "string",
          "description" : "The api key group id"
        }, {
          "in" : "path",
          "name" : "clientId",
          "required" : true,
          "type" : "string",
          "description" : "the api key id"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Patch"
          },
          "description" : "The patch for the api key"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiKey"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "delete" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Delete an api key",
        "description" : "Delete an api key for a specified service group",
        "operationId" : "deleteApiKeyFromGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "type" : "string",
          "description" : "The api key group id"
        }, {
          "in" : "path",
          "name" : "clientId",
          "required" : true,
          "type" : "string",
          "description" : "the api key id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Deleted"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/groups/{groupId}/apikeys" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Get all api keys for the group of a service",
        "description" : "Get all api keys for the group of a service",
        "operationId" : "apiKeysFromGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "type" : "string",
          "description" : "The api key group id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ApiKey"
              }
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "post" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Create a new api key for a group",
        "description" : "Create a new api key for a group",
        "operationId" : "createApiKeyFromGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "type" : "string",
          "description" : "The api key group id"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApiKey"
          },
          "description" : "The api key to create"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiKey"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/apikeys" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "apikeys" ],
        "summary" : "Get all api keys",
        "description" : "Get all api keys",
        "operationId" : "allApiKeys",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ApiKey"
              }
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/services/{serviceId}/template" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "services" ],
        "summary" : "Get a service descriptor error template",
        "description" : "Get a service descriptor error template",
        "operationId" : "serviceTemplate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The service id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorTemplate"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "put" : {
        "deprecated" : false,
        "tags" : [ "services" ],
        "summary" : "Update an error template to a service descriptor",
        "description" : "Update an error template to a service descriptor",
        "operationId" : "updateServiceTemplate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The service id"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ErrorTemplate"
          },
          "description" : "The updated service descriptor template"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorTemplate"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "post" : {
        "deprecated" : false,
        "tags" : [ "services" ],
        "summary" : "Create a service descriptor error template",
        "description" : "Update a service descriptor targets",
        "operationId" : "createServiceTemplate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The service id"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ErrorTemplate"
          },
          "description" : "The patch for the service error template"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorTemplate"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "delete" : {
        "deprecated" : false,
        "tags" : [ "services" ],
        "summary" : "Delete a service descriptor error template",
        "description" : "Delete a service descriptor error template",
        "operationId" : "deleteServiceTemplate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The service id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Deleted"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/services/{serviceId}/targets" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "services" ],
        "summary" : "Get a service descriptor targets",
        "description" : "Get a service descriptor targets",
        "operationId" : "serviceTargets",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The service id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Target"
              }
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "post" : {
        "deprecated" : false,
        "tags" : [ "services" ],
        "summary" : "Add a target to a service descriptor",
        "description" : "Add a target to a service descriptor",
        "operationId" : "serviceAddTarget",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The service id"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Target"
          },
          "description" : "The updated service descriptor"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Target"
              }
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "patch" : {
        "deprecated" : false,
        "tags" : [ "services" ],
        "summary" : "Update a service descriptor targets",
        "description" : "Update a service descriptor targets",
        "operationId" : "updateServiceTargets",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The service id"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Patch"
          },
          "description" : "The patch for the service targets"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Target"
              }
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "delete" : {
        "deprecated" : false,
        "tags" : [ "services" ],
        "summary" : "Delete a service descriptor target",
        "description" : "Delete a service descriptor target",
        "operationId" : "serviceDeleteTarget",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The service id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Target"
              }
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/services/{serviceId}" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "services" ],
        "summary" : "Get a service descriptor",
        "description" : "Get a service descriptor",
        "operationId" : "service",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The service id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Service"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "put" : {
        "deprecated" : false,
        "tags" : [ "services" ],
        "summary" : "Update a service descriptor",
        "description" : "Update a service descriptor",
        "operationId" : "updateService",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The service id"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Service"
          },
          "description" : "The updated service descriptor"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Service"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "patch" : {
        "deprecated" : false,
        "tags" : [ "services" ],
        "summary" : "Update a service descriptor with a diff",
        "description" : "Update a service descriptor with a diff",
        "operationId" : "patchService",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The service id"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Patch"
          },
          "description" : "The patch for the service"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Service"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "delete" : {
        "deprecated" : false,
        "tags" : [ "services" ],
        "summary" : "Delete a service descriptor",
        "description" : "Delete a service descriptor",
        "operationId" : "deleteService",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceId",
          "required" : true,
          "type" : "string",
          "description" : "The service id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Deleted"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/services" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "services" ],
        "summary" : "Get all services",
        "description" : "Get all services",
        "operationId" : "allServices",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Service"
              }
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "post" : {
        "deprecated" : false,
        "tags" : [ "services" ],
        "summary" : "Create a new service descriptor",
        "description" : "Create a new service descriptor",
        "operationId" : "createService",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Service"
          },
          "description" : "The service descriptor to create"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Service"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/groups/{serviceGroupId}/services" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "services" ],
        "summary" : "Get all services descriptor for a group",
        "description" : "Get all services descriptor for a group",
        "operationId" : "serviceGroupServices",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceGroupId",
          "required" : true,
          "type" : "string",
          "description" : "The service group id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ApiKey"
              }
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/groups/{serviceGroupId}" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "groups" ],
        "summary" : "Get a service group",
        "description" : "Get a service group",
        "operationId" : "serviceGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceGroupId",
          "required" : true,
          "type" : "string",
          "description" : "The service group id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Group"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "put" : {
        "deprecated" : false,
        "tags" : [ "groups" ],
        "summary" : "Update a service group",
        "description" : "Update a service group",
        "operationId" : "updateGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceGroupId",
          "required" : true,
          "type" : "string",
          "description" : "The service group id"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Group"
          },
          "description" : "The updated service group"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Group"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "patch" : {
        "deprecated" : false,
        "tags" : [ "groups" ],
        "summary" : "Update a service group with a diff",
        "description" : "Update a service group with a diff",
        "operationId" : "patchGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceGroupId",
          "required" : true,
          "type" : "string",
          "description" : "The service group id"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Patch"
          },
          "description" : "The patch for the service group"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Group"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "delete" : {
        "deprecated" : false,
        "tags" : [ "groups" ],
        "summary" : "Delete a service group",
        "description" : "Delete a service group",
        "operationId" : "deleteGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "serviceGroupId",
          "required" : true,
          "type" : "string",
          "description" : "The service group id"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Deleted"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/groups" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "groups" ],
        "summary" : "Get all service groups",
        "description" : "Get all service groups",
        "operationId" : "allServiceGroups",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Group"
              }
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "post" : {
        "deprecated" : false,
        "tags" : [ "groups" ],
        "summary" : "Create a new service group",
        "description" : "Create a new service group",
        "operationId" : "createGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Group"
          },
          "description" : "The service group to create"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Group"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/live/{id}" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "stats" ],
        "summary" : "Get live feed of otoroshi stats",
        "description" : "Get live feed of global otoroshi stats (global) or for a service {id}",
        "operationId" : "serviceLiveStats",
        "produces" : [ "application/json", "text/event-stream" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "type" : "string",
          "description" : "The service id or global for otoroshi stats"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Stats"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/live" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "stats" ],
        "summary" : "Get global otoroshi stats",
        "description" : "Get global otoroshi stats",
        "operationId" : "globalLiveStats",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Stats"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/globalconfig" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "configuration" ],
        "summary" : "Get the full configuration of Otoroshi",
        "description" : "Get the full configuration of Otoroshi",
        "operationId" : "globalConfig",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/GlobalConfig"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "put" : {
        "deprecated" : false,
        "tags" : [ "configuration" ],
        "summary" : "Update the global configuration",
        "description" : "Update the global configuration",
        "operationId" : "putGlobalConfig",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GlobalConfig"
          },
          "description" : "The updated global config"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/GlobalConfig"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "patch" : {
        "deprecated" : false,
        "tags" : [ "configuration" ],
        "summary" : "Update the global configuration with a diff",
        "description" : "Update the global configuration with a diff",
        "operationId" : "patchGlobalConfig",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Patch"
          },
          "description" : "The updated global config as patch"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/GlobalConfig"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/otoroshi.json" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "import" ],
        "summary" : "Export the full state of Otoroshi",
        "description" : "Export the full state of Otoroshi",
        "operationId" : "fullExport",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ImportExport"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      },
      "post" : {
        "deprecated" : false,
        "tags" : [ "import" ],
        "summary" : "Import the full state of Otoroshi",
        "description" : "Import the full state of Otoroshi",
        "operationId" : "fullImport",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ImportExport"
          },
          "description" : "The full export"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Done"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/api/import" : {
      "post" : {
        "deprecated" : false,
        "tags" : [ "import" ],
        "summary" : "Import the full state of Otoroshi as a file",
        "description" : "Import the full state of Otoroshi as a file",
        "operationId" : "fullImportFromFile",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ImportExport"
          },
          "description" : "The full export"
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication"
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Done"
            }
          }
        },
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ]
      }
    },
    "/health" : {
      "get" : {
        "deprecated" : false,
        "tags" : [ "health" ],
        "summary" : "Return current Otoroshi health",
        "description" : "Import the full state of Otoroshi as a file",
        "operationId" : "health",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue :)"
          },
          "404" : {
            "description" : "Resource not found or does not exist"
          },
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/OtoroshiHealth"
            }
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "otoroshi_auth" : {
      "type" : "basic"
    }
  },
  "definitions" : {
    "ApiKey" : {
      "description" : "An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services.",
      "type" : "object",
      "required" : [ "clientId", "clientSecret", "clientName", "authorizedGroup", "enabled" ],
      "properties" : {
        "clientId" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything"
        },
        "clientSecret" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything"
        },
        "clientName" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The name of the api key, for humans ;-)"
        },
        "authorizedGroup" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The group id on which the key is authorized"
        },
        "enabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether or not the key is enabled. If disabled, resources won't be available to calls using this key"
        },
        "throttlingQuota" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "Authorized number of calls per second, measured on 10 seconds"
        },
        "dailyQuota" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "Authorized number of calls per day"
        },
        "monthlyQuota" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "Authorized number of calls per month"
        },
        "metadata" : {
          "type" : "object",
          "example" : {
            "key" : "value"
          },
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Bunch of metadata for the key"
        }
      }
    },
    "Auth0Config" : {
      "description" : "Configuration for Auth0 domain",
      "type" : "object",
      "required" : [ "clientId", "clientSecret", "domain", "callbackUrl" ],
      "properties" : {
        "clientId" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "Auth0 client id"
        },
        "clientSecret" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "Auth0 client secret"
        },
        "domain" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "Auth0 domain"
        },
        "callbackUrl" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "Auth0 callback URL"
        }
      }
    },
    "Canary" : {
      "description" : "The configuration of the canary mode for a service descriptor",
      "type" : "object",
      "required" : [ "enabled", "traffic", "targets", "root" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Use canary mode for this service"
        },
        "traffic" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 123123,
          "description" : "Ratio of traffic that will be sent to canary targets."
        },
        "targets" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Target"
          },
          "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures"
        },
        "root" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar"
        }
      }
    },
    "CleverSettings" : {
      "description" : "Configuration for CleverCloud client",
      "type" : "object",
      "required" : [ "consumerKey", "consumerSecret", "token", "secret", "orgaId" ],
      "properties" : {
        "consumerKey" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "CleverCloud consumer key"
        },
        "consumerSecret" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "CleverCloud consumer token"
        },
        "token" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "CleverCloud oauth token"
        },
        "secret" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "CleverCloud oauth secret"
        },
        "orgaId" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "CleverCloud organization id"
        }
      }
    },
    "ClientConfig" : {
      "description" : "The configuration of the circuit breaker for a service descriptor",
      "type" : "object",
      "required" : [ "useCircuitBreaker", "retries", "maxErrors", "retryInitialDelay", "backoffFactor", "callTimeout", "globalTimeout", "sampleInterval" ],
      "properties" : {
        "useCircuitBreaker" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !"
        },
        "retries" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 123123,
          "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up."
        },
        "maxErrors" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 123123,
          "description" : "Specify how many errors can pass before opening the circuit breaker"
        },
        "retryInitialDelay" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 123123,
          "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor"
        },
        "backoffFactor" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 123123,
          "description" : "Specify the factor to multiply the delay for each retry"
        },
        "callTimeout" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 123123,
          "description" : "Specify how long each call should last at most in milliseconds"
        },
        "globalTimeout" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 123123,
          "description" : "Specify how long the global call (with retries) should last at most in milliseconds"
        },
        "sampleInterval" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 123123,
          "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted"
        }
      }
    },
    "Deleted" : {
      "type" : "object",
      "required" : [ "deleted" ],
      "properties" : {
        "deleted" : {
          "type" : "boolean",
          "example" : true
        }
      }
    },
    "Done" : {
      "type" : "object",
      "required" : [ "done" ],
      "properties" : {
        "done" : {
          "type" : "boolean",
          "example" : true
        }
      }
    },
    "Environment" : {
      "type" : "string",
      "example" : "prod",
      "description" : "The name of the environment for service descriptors"
    },
    "ErrorTemplate" : {
      "description" : "Error templates for a service descriptor",
      "type" : "object",
      "required" : [ "serviceId", "template40x", "template50x", "templateBuild", "templateMaintenance", "messages" ],
      "properties" : {
        "serviceId" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The Id of the service for which the error template is enabled"
        },
        "template40x" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The html template for 40x errors"
        },
        "template50x" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The html template for 50x errors"
        },
        "templateBuild" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The html template for build page"
        },
        "templateMaintenance" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The html template for maintenance page"
        },
        "messages" : {
          "type" : "object",
          "example" : {
            "key" : "value"
          },
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Map for custom messages"
        }
      }
    },
    "ExposedApi" : {
      "description" : "The Open API configuration for your service (if one)",
      "type" : "object",
      "required" : [ "exposeApi" ],
      "properties" : {
        "exposeApi" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether or not the current service expose an API with an Open API descriptor"
        },
        "openApiDescriptorUrl" : {
          "type" : "string",
          "format" : "uri",
          "example" : "http://www.google.com",
          "description" : "The URL of the Open API descriptor"
        }
      }
    },
    "GlobalConfig" : {
      "type" : "object",
      "required" : [ "streamEntityOnly", "autoLinkToDefaultGroup", "limitConcurrentRequests", "maxConcurrentRequests", "useCircuitBreakers", "apiReadOnly", "u2fLoginOnly", "ipFiltering", "throttlingQuota", "perIpThrottlingQuota", "analyticsEventsUrl", "analyticsWebhooks", "alertsWebhooks", "alertsEmails", "endlessIpAddresses" ],
      "description" : "The global config object of Otoroshi, used to customize settings of the current Otoroshi instance",
      "properties" : {
        "lines" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "example" : "a string value"
          },
          "description" : "Possibles lines for Otoroshi"
        },
        "streamEntityOnly" : {
          "type" : "boolean",
          "example" : true,
          "description" : "HTTP will be streamed only. Doesn't work with old browsers"
        },
        "autoLinkToDefaultGroup" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If not defined, every new service descriptor will be added to the default group"
        },
        "limitConcurrentRequests" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If enabled, Otoroshi will reject new request if too much at the same time"
        },
        "maxConcurrentRequests" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The number of authorized request processed at the same time"
        },
        "maxHttp10ResponseSize" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The max size in bytes of an HTTP 1.0 response"
        },
        "useCircuitBreakers" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If enabled, services will be authorized to use circuit breakers"
        },
        "apiReadOnly" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If enabled, Admin API won't be able to write/update/delete entities"
        },
        "u2fLoginOnly" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If enabled, login to backoffice through Auth0 will be disabled"
        },
        "ipFiltering" : {
          "$ref" : "#/definitions/IpFiltering"
        },
        "throttlingQuota" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "Authorized number of calls per second globally, measured on 10 seconds"
        },
        "perIpThrottlingQuota" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "Authorized number of calls per second globally per IP address, measured on 10 seconds"
        },
        "analyticsEventsUrl" : {
          "type" : "string",
          "format" : "uri",
          "example" : "http://www.google.com",
          "description" : "The URL to get analytics events from"
        },
        "analyticsWebhooks" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Webhook"
          },
          "description" : "Webhook that will receive all internal Otoroshi events"
        },
        "alertsWebhooks" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Webhook"
          },
          "description" : "Webhook that will receive all Otoroshi alert events"
        },
        "alertsEmails" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "email",
            "example" : "admin@otoroshi.io"
          },
          "description" : "Email addresses that will receive all Otoroshi alert events"
        },
        "endlessIpAddresses" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "ipv4",
            "example" : "192.192.192.192"
          },
          "description" : "IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros"
        },
        "middleFingers" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Use middle finger emoji as a response character for endless HTTP responses"
        },
        "maxLogsSize" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 123123,
          "description" : "Number of events kept locally"
        },
        "cleverSettings" : {
          "$ref" : "#/definitions/CleverSettings",
          "description" : "Optional CleverCloud configuration"
        },
        "mailGunSettings" : {
          "$ref" : "#/definitions/MailgunSettings",
          "description" : "Optional mailgun configuration"
        },
        "backofficeAuth0Config" : {
          "$ref" : "#/definitions/Auth0Config",
          "description" : "Optional configuration for the backoffice Auth0 domain"
        },
        "privateAppsAuth0Config" : {
          "$ref" : "#/definitions/Auth0Config",
          "description" : "Optional configuration for the private apps Auth0 domain"
        }
      }
    },
    "Group" : {
      "description" : "An Otoroshi service group is just a group of service descriptor. It is useful to be able to define Api Keys for the whole group",
      "type" : "object",
      "required" : [ "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The unique id of the group. Usually 64 random alpha numerical characters, but can be anything"
        },
        "name" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The name of the group"
        },
        "description" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The descriptoin of the group"
        }
      }
    },
    "HealthCheck" : {
      "description" : "The configuration for checking health of a service. Otoroshi will perform GET call on the URL to check if the service is still alive",
      "type" : "object",
      "required" : [ "enabled" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether or not healthcheck is enabled on the current service descriptor"
        },
        "url" : {
          "type" : "string",
          "format" : "uri",
          "example" : "http://www.google.com",
          "description" : "The URL to check"
        }
      }
    },
    "OtoroshiHealth" : {
      "description" : "The structure that represent current Otoroshi health",
      "type" : "object",
      "required" : [ "label", "otoroshi", "datastore" ],
      "properties" : {
        "otoroshi" : {
          "type" : "string",
          "enum" : [ "healthy", "unhealthy", "down" ]
        },
        "datastore" : {
          "type" : "string",
          "enum" : [ "healthy", "unhealthy", "unreachable" ]
        }
      }
    },
    "ImportExport" : {
      "description" : "The structure that can be imported to or exported from Otoroshi. It represent the memory state of Otoroshi",
      "type" : "object",
      "required" : [ "label", "dateRaw", "date", "stats", "config", "admins", "simpleAdmins", "serviceGroups", "apiKeys", "serviceDescriptors", "errorTemplates" ],
      "properties" : {
        "label" : {
          "type" : "string",
          "example" : "a string value"
        },
        "dateRaw" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123
        },
        "date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2017-07-21T17:32:28Z"
        },
        "stats" : {
          "$ref" : "#/definitions/ImportExportStats",
          "description" : "Current global stats at the time of export"
        },
        "config" : {
          "$ref" : "#/definitions/GlobalConfig",
          "description" : "Current global config at the time of export"
        },
        "appConfig" : {
          "type" : "object",
          "example" : {
            "key" : "value"
          },
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Current env variables at the time of export"
        },
        "admins" : {
          "type" : "array",
          "items" : {
            "description" : "Administrator using FIDO U2F device to access Otoroshi",
            "type" : "object",
            "required" : [ "username", "label", "password", "createdAt", "registration" ],
            "properties" : {
              "username" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The email address of the user"
              },
              "label" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The label for the user"
              },
              "password" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The hashed password of the user"
              },
              "createdAt" : {
                "type" : "integer",
                "format" : "int64",
                "example" : 123,
                "description" : "The creation date of the user"
              },
              "registration" : {
                "type" : "object",
                "example" : {
                  "key" : "value"
                },
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "The U2F registration slug"
              }
            }
          },
          "description" : "Current U2F admin at the time of export"
        },
        "simpleAdmins" : {
          "type" : "array",
          "items" : {
            "description" : "Administrator using just login/password tuple to access Otoroshi",
            "type" : "object",
            "required" : [ "username", "label", "password", "createdAt" ],
            "properties" : {
              "username" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The email address of the user"
              },
              "label" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The label for the user"
              },
              "password" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The hashed password of the user"
              },
              "createdAt" : {
                "type" : "integer",
                "format" : "int64",
                "example" : 123,
                "description" : "The creation date of the user"
              }
            }
          },
          "description" : "Current simple admins at the time of export"
        },
        "serviceGroups" : {
          "type" : "array",
          "items" : {
            "description" : "An Otoroshi service group is just a group of service descriptor. It is useful to be able to define Api Keys for the whole group",
            "type" : "object",
            "required" : [ "id", "name" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The unique id of the group. Usually 64 random alpha numerical characters, but can be anything"
              },
              "name" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The name of the group"
              },
              "description" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The descriptoin of the group"
              }
            }
          },
          "description" : "Current service groups at the time of export"
        },
        "apiKeys" : {
          "type" : "array",
          "items" : {
            "description" : "An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services.",
            "type" : "object",
            "required" : [ "clientId", "clientSecret", "clientName", "authorizedGroup", "enabled" ],
            "properties" : {
              "clientId" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything"
              },
              "clientSecret" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything"
              },
              "clientName" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The name of the api key, for humans ;-)"
              },
              "authorizedGroup" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The group id on which the key is authorized"
              },
              "enabled" : {
                "type" : "boolean",
                "example" : true,
                "description" : "Whether or not the key is enabled. If disabled, resources won't be available to calls using this key"
              },
              "throttlingQuota" : {
                "type" : "integer",
                "format" : "int64",
                "example" : 123,
                "description" : "Authorized number of calls per second, measured on 10 seconds"
              },
              "dailyQuota" : {
                "type" : "integer",
                "format" : "int64",
                "example" : 123,
                "description" : "Authorized number of calls per day"
              },
              "monthlyQuota" : {
                "type" : "integer",
                "format" : "int64",
                "example" : 123,
                "description" : "Authorized number of calls per month"
              },
              "metadata" : {
                "type" : "object",
                "example" : {
                  "key" : "value"
                },
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Bunch of metadata for the key"
              }
            }
          },
          "description" : "Current apik keys at the time of export"
        },
        "serviceDescriptors" : {
          "type" : "array",
          "items" : {
            "description" : "An otoroshi service descriptor. Represent a forward HTTP call on a domain to another location with some optional api management mecanism",
            "type" : "object",
            "required" : [ "id", "groupId", "name", "env", "domain", "subdomain", "targets", "root", "enabled", "privateApp", "forceHttps", "maintenanceMode", "buildMode", "enforceSecureCommunication" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "format" : "uuid",
                "example" : "110e8400-e29b-11d4-a716-446655440000",
                "description" : "A unique random string to identify your service"
              },
              "groupId" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "Each service descriptor is attached to a group. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group"
              },
              "name" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The name of your service. Only for debug and human readability purposes"
              },
              "env" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'"
              },
              "domain" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The domain on which the service is available."
              },
              "subdomain" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The subdomain on which the service is available"
              },
              "targets" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/definitions/Target"
                },
                "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures"
              },
              "root" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar"
              },
              "matchingRoot" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The root path on which the service is available"
              },
              "localHost" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The host used localy, mainly localhost:xxxx"
              },
              "localScheme" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The scheme used localy, mainly http"
              },
              "redirectToLocal" : {
                "type" : "boolean",
                "example" : true,
                "description" : "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests"
              },
              "enabled" : {
                "type" : "boolean",
                "example" : true,
                "description" : "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist"
              },
              "privateApp" : {
                "type" : "boolean",
                "example" : true,
                "description" : "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain"
              },
              "forceHttps" : {
                "type" : "boolean",
                "example" : true,
                "description" : "Will force redirection to https:// if not present"
              },
              "maintenanceMode" : {
                "type" : "boolean",
                "example" : true,
                "description" : "Display a maintainance page when a user try to use the service"
              },
              "buildMode" : {
                "type" : "boolean",
                "example" : true,
                "description" : "Display a construction page when a user try to use the service"
              },
              "enforceSecureCommunication" : {
                "type" : "boolean",
                "example" : true,
                "description" : "When enabled, Otoroshi will try to exchange headers with downstream service to ensure no one else can use the service from outside"
              },
              "sendOtoroshiHeadersBack" : {
                "type" : "boolean",
                "example" : true,
                "description" : "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ..."
              },
              "secComExcludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "example" : "a string value"
                },
                "description" : "URI patterns excluded from secured communications"
              },
              "publicPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "example" : "a string value"
                },
                "description" : "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'"
              },
              "privatePatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "example" : "a string value"
                },
                "description" : "If you define a public pattern that is a little bit too much, you can make some of public URL private again"
              },
              "ipFiltering" : {
                "$ref" : "#/definitions/IpFiltering"
              },
              "api" : {
                "$ref" : "#/definitions/ExposedApi"
              },
              "healthCheck" : {
                "$ref" : "#/definitions/HealthCheck"
              },
              "clientConfig" : {
                "$ref" : "#/definitions/ClientConfig"
              },
              "Canary" : {
                "$ref" : "#/definitions/Canary"
              },
              "statsdConfig" : {
                "$ref" : "#/definitions/StatsdConfig"
              },
              "metadata" : {
                "type" : "object",
                "example" : {
                  "key" : "value"
                },
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Just a bunch of random properties"
              },
              "matchingHeaders" : {
                "type" : "object",
                "example" : {
                  "key" : "value"
                },
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Specify headers that MUST be present on client request to route it. Useful to implement versioning"
              },
              "additionalHeaders" : {
                "type" : "object",
                "example" : {
                  "key" : "value"
                },
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Specify headers that will be added to each client request. Useful to add authentication"
              }
            }
          },
          "description" : "Current service descriptors at the time of export"
        },
        "errorTemplates" : {
          "type" : "array",
          "items" : {
            "description" : "Error templates for a service descriptor",
            "type" : "object",
            "required" : [ "serviceId", "template40x", "template50x", "templateBuild", "templateMaintenance", "messages" ],
            "properties" : {
              "serviceId" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The Id of the service for which the error template is enabled"
              },
              "template40x" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The html template for 40x errors"
              },
              "template50x" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The html template for 50x errors"
              },
              "templateBuild" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The html template for build page"
              },
              "templateMaintenance" : {
                "type" : "string",
                "example" : "a string value",
                "description" : "The html template for maintenance page"
              },
              "messages" : {
                "type" : "object",
                "example" : {
                  "key" : "value"
                },
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Map for custom messages"
              }
            }
          },
          "description" : "Current error templates at the time of export"
        }
      }
    },
    "ImportExportStats" : {
      "description" : "Global stats for the current Otoroshi instances",
      "type" : "object",
      "required" : [ "calls", "dataIn", "dataOut" ],
      "properties" : {
        "calls" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "Number of calls to Otoroshi globally"
        },
        "dataIn" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The amount of data sent to Otoroshi globally"
        },
        "dataOut" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The amount of data sent from Otoroshi globally"
        }
      }
    },
    "IpFiltering" : {
      "description" : "The filtering configuration block for a service of globally.",
      "type" : "object",
      "required" : [ "whitelist", "blacklist" ],
      "properties" : {
        "whitelist" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "ipv4",
            "example" : "192.192.192.192"
          },
          "description" : "Whitelisted IP addresses"
        },
        "blacklist" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "ipv4",
            "example" : "192.192.192.192"
          },
          "description" : "Blacklisted IP addresses"
        }
      }
    },
    "MailgunSettings" : {
      "description" : "Configuration for mailgun api client",
      "type" : "object",
      "required" : [ "apiKey", "domain" ],
      "properties" : {
        "apiKey" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "Mailgun Api Key"
        },
        "domain" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "Mailgun domain"
        }
      }
    },
    "Patch" : {
      "description" : "A set of changes described in JSON Patch format: http://jsonpatch.com/ (RFC 6902)",
      "type" : "array",
      "items" : {
        "type" : "object",
        "required" : [ "op", "path" ],
        "properties" : {
          "op" : {
            "type" : "string",
            "enum" : [ "add", "replace", "remove", "copy", "test" ]
          },
          "path" : {
            "type" : "string",
            "example" : "a string value"
          },
          "value" : { }
        }
      }
    },
    "Quotas" : {
      "description" : "Quotas state for an api key on a service group",
      "type" : "object",
      "required" : [ "authorizedCallsPerSec", "currentCallsPerSec", "remainingCallsPerSec", "authorizedCallsPerDay", "currentCallsPerDay", "remainingCallsPerDay", "authorizedCallsPerMonth", "currentCallsPerMonth", "remainingCallsPerMonth" ],
      "properties" : {
        "authorizedCallsPerSec" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The number of authorized calls per second"
        },
        "currentCallsPerSec" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The current number of calls per second"
        },
        "remainingCallsPerSec" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The remaining number of calls per second"
        },
        "authorizedCallsPerDay" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The number of authorized calls per day"
        },
        "currentCallsPerDay" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The current number of calls per day"
        },
        "remainingCallsPerDay" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The remaining number of calls per day"
        },
        "authorizedCallsPerMonth" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The number of authorized calls per month"
        },
        "currentCallsPerMonth" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The current number of calls per month"
        },
        "remainingCallsPerMonth" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The number of authorized calls per month"
        }
      }
    },
    "Service" : {
      "description" : "An otoroshi service descriptor. Represent a forward HTTP call on a domain to another location with some optional api management mecanism",
      "type" : "object",
      "required" : [ "id", "groupId", "name", "env", "domain", "subdomain", "targets", "root", "enabled", "privateApp", "forceHttps", "maintenanceMode", "buildMode", "enforceSecureCommunication" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "110e8400-e29b-11d4-a716-446655440000",
          "description" : "A unique random string to identify your service"
        },
        "groupId" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "Each service descriptor is attached to a group. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group"
        },
        "name" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The name of your service. Only for debug and human readability purposes"
        },
        "env" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'"
        },
        "domain" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The domain on which the service is available."
        },
        "subdomain" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The subdomain on which the service is available"
        },
        "targets" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Target"
          },
          "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures"
        },
        "root" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar"
        },
        "matchingRoot" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The root path on which the service is available"
        },
        "localHost" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The host used localy, mainly localhost:xxxx"
        },
        "localScheme" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The scheme used localy, mainly http"
        },
        "redirectToLocal" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests"
        },
        "enabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist"
        },
        "privateApp" : {
          "type" : "boolean",
          "example" : true,
          "description" : "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain"
        },
        "forceHttps" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Will force redirection to https:// if not present"
        },
        "maintenanceMode" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Display a maintainance page when a user try to use the service"
        },
        "buildMode" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Display a construction page when a user try to use the service"
        },
        "enforceSecureCommunication" : {
          "type" : "boolean",
          "example" : true,
          "description" : "When enabled, Otoroshi will try to exchange headers with downstream service to ensure no one else can use the service from outside"
        },
        "sendOtoroshiHeadersBack" : {
          "type" : "boolean",
          "example" : true,
          "description" : "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ..."
        },
        "secComExcludedPatterns" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "example" : "a string value"
          },
          "description" : "URI patterns excluded from secured communications"
        },
        "publicPatterns" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "example" : "a string value"
          },
          "description" : "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'"
        },
        "privatePatterns" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "example" : "a string value"
          },
          "description" : "If you define a public pattern that is a little bit too much, you can make some of public URL private again"
        },
        "ipFiltering" : {
          "$ref" : "#/definitions/IpFiltering"
        },
        "api" : {
          "$ref" : "#/definitions/ExposedApi"
        },
        "healthCheck" : {
          "$ref" : "#/definitions/HealthCheck"
        },
        "clientConfig" : {
          "$ref" : "#/definitions/ClientConfig"
        },
        "Canary" : {
          "$ref" : "#/definitions/Canary"
        },
        "statsdConfig" : {
          "$ref" : "#/definitions/StatsdConfig"
        },
        "metadata" : {
          "type" : "object",
          "example" : {
            "key" : "value"
          },
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Just a bunch of random properties"
        },
        "matchingHeaders" : {
          "type" : "object",
          "example" : {
            "key" : "value"
          },
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Specify headers that MUST be present on client request to route it. Useful to implement versioning"
        },
        "additionalHeaders" : {
          "type" : "object",
          "example" : {
            "key" : "value"
          },
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Specify headers that will be added to each client request. Useful to add authentication"
        }
      }
    },
    "SimpleAdmin" : {
      "description" : "Administrator using just login/password tuple to access Otoroshi",
      "type" : "object",
      "required" : [ "username", "label", "password", "createdAt" ],
      "properties" : {
        "username" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The email address of the user"
        },
        "label" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The label for the user"
        },
        "password" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The hashed password of the user"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The creation date of the user"
        }
      }
    },
    "Stats" : {
      "description" : "Live stats for a service or globally",
      "type" : "object",
      "required" : [ "calls", "dataIn", "dataOut", "rate", "duration", "overhead", "dataInRate", "dataOutRate", "concurrentHandledRequests" ],
      "properties" : {
        "calls" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "Number of calls on the specified service or globally"
        },
        "dataIn" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The amount of data sent to the specified service or Otoroshi globally"
        },
        "dataOut" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The amount of data sent from the specified service or Otoroshi globally"
        },
        "rate" : {
          "type" : "integer",
          "format" : "double",
          "example" : 42.2,
          "description" : "The rate of data sent from and to the specified service or Otoroshi globally"
        },
        "duration" : {
          "type" : "integer",
          "format" : "double",
          "example" : 42.2,
          "description" : "The average duration for a call"
        },
        "overhead" : {
          "type" : "integer",
          "format" : "double",
          "example" : 42.2,
          "description" : "The average overhead time induced by Otoroshi for each call"
        },
        "dataInRate" : {
          "type" : "integer",
          "format" : "double",
          "example" : 42.2,
          "description" : "The rate of data sent to the specified service or Otoroshi globally"
        },
        "dataOutRate" : {
          "type" : "integer",
          "format" : "double",
          "example" : 42.2,
          "description" : "The rate of data sent from the specified service or Otoroshi globally"
        },
        "concurrentHandledRequests" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The number of concurrent request currently"
        }
      }
    },
    "StatsdConfig" : {
      "description" : "The configuration for statsd metrics push",
      "type" : "object",
      "required" : [ "host", "port", "datadog" ],
      "properties" : {
        "host" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The host of the StatsD agent"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 123123,
          "description" : "The port of the StatsD agent"
        },
        "datadog" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Datadog agent"
        }
      }
    },
    "Target" : {
      "description" : "A Target is where an HTTP call will be forwarded in the end from a service domain",
      "type" : "object",
      "required" : [ "host", "scheme" ],
      "properties" : {
        "host" : {
          "type" : "string",
          "format" : "hostname",
          "example" : "www.google.com",
          "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port"
        },
        "scheme" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The protocol used for communication. Can be http or https"
        }
      }
    },
    "U2FAdmin" : {
      "description" : "Administrator using FIDO U2F device to access Otoroshi",
      "type" : "object",
      "required" : [ "username", "label", "password", "createdAt", "registration" ],
      "properties" : {
        "username" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The email address of the user"
        },
        "label" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The label for the user"
        },
        "password" : {
          "type" : "string",
          "example" : "a string value",
          "description" : "The hashed password of the user"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "The creation date of the user"
        },
        "registration" : {
          "type" : "object",
          "example" : {
            "key" : "value"
          },
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "The U2F registration slug"
        }
      }
    },
    "Webhook" : {
      "description" : "A callback URL where events are posted",
      "type" : "object",
      "required" : [ "url", "headers" ],
      "properties" : {
        "url" : {
          "type" : "string",
          "format" : "uri",
          "example" : "http://www.google.com",
          "description" : "The URL where events are posted"
        },
        "headers" : {
          "type" : "object",
          "example" : {
            "key" : "value"
          },
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Headers to authorize the call or whatever"
        }
      }
    }
  }
}