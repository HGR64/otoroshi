
GET     /                                                     controllers.BackOfficeController.index
GET     /robot.txt                                            controllers.BackOfficeController.robotTxt
GET     /error                                                controllers.BackOfficeController.error(message: Option[String])
GET     /auth0error                                           controllers.AuthController.auth0error(error: Option[String], error_description: Option[String])
GET     /health                                               controllers.ApiController.health()
GET     /metrics                                              controllers.ApiController.processMetrics()

# U2F URLs
POST    /bo/u2f/register/start                                controllers.U2FController.u2fRegisterStart()
POST    /bo/u2f/register/finish                               controllers.U2FController.u2fRegisterFinish()
POST    /bo/u2f/login/start                                   controllers.U2FController.u2fAuthenticationStart()
POST    /bo/u2f/login/finish                                  controllers.U2FController.u2fAuthenticationFinish()
GET     /bo/u2f/admins                                        controllers.U2FController.u2fAdmins()
DELETE  /bo/u2f/admins/:username/:id                          controllers.U2FController.deleteU2FAdmin(username, id)

# WebAuthn URLs

POST    /bo/webauthn/register/start                           controllers.U2FController.webAuthnRegistrationStart()
POST    /bo/webauthn/register/finish                          controllers.U2FController.webAuthnRegistrationFinish()
POST    /bo/webauthn/login/start                              controllers.U2FController.webAuthnLoginStart()
POST    /bo/webauthn/login/finish                             controllers.U2FController.webAuthnLoginFinish()

GET     /bo/webauthn/admins                                   controllers.U2FController.webAuthnAdmins()
DELETE  /bo/webauthn/admins/:username/:id                     controllers.U2FController.webAuthnDeleteAdmin(username, id)

# Simple Login URLs

GET     /bo/simple/admins                                     controllers.U2FController.simpleAdmins()
POST    /bo/simple/admins                                     controllers.U2FController.registerSimpleAdmin()
GET     /bo/simple/login                                      controllers.U2FController.loginPage()
POST    /bo/simple/login                                      controllers.U2FController.simpleLogin()
DELETE  /bo/simple/admins/:username                           controllers.U2FController.deleteAdmin(username)

# BackOffice URLs
GET     /bo/cacert                                            controllers.BackOfficeController.caCert()
GET     /bo/dashboard                                         controllers.BackOfficeController.dashboard
GET     /bo/dashboard/*ui                                     controllers.BackOfficeController.dashboardRoutes(ui)
GET     /bo/api/lines/:lineId/:serviceId/docframe             controllers.BackOfficeController.documentationFrame(lineId, serviceId)
GET     /bo/api/lines/:lineId/:serviceId/docdesc              controllers.BackOfficeController.documentationFrameDescriptor(lineId, serviceId)
POST    /bo/api/search/services                               controllers.BackOfficeController.searchServicesApi()
GET     /bo/api/version                                       controllers.BackOfficeController.version()
GET     /bo/api/env                                           controllers.BackOfficeController.getEnv()
GET     /bo/api/apps                                          controllers.BackOfficeController.cleverApps()
GET     /bo/api/sessions                                      controllers.BackOfficeController.sessions()
DELETE  /bo/api/sessions/:id                                  controllers.BackOfficeController.discardSession(id)
DELETE  /bo/api/sessions                                      controllers.BackOfficeController.discardAllSessions()
GET     /bo/api/papps/sessions                                controllers.BackOfficeController.privateAppsSessions()
DELETE  /bo/api/papps/sessions/:id                            controllers.BackOfficeController.discardPrivateAppsSession(id)
DELETE  /bo/api/papps/sessions                                controllers.BackOfficeController.discardAllPrivateAppsSessions()
POST    /bo/api/panic                                         controllers.BackOfficeController.panicMode()
GET     /bo/api/events/audit                                  controllers.BackOfficeController.auditEvents()
GET     /bo/api/events/alert                                  controllers.BackOfficeController.alertEvents()
GET     /bo/api/loggers/:name/level                           controllers.BackOfficeController.getLogLevel(name)
PUT     /bo/api/loggers/:name/level                           controllers.BackOfficeController.changeLogLevel(name, newLevel: Option[String])
GET     /bo/api/loggers                                       controllers.BackOfficeController.getAllLoggers()
GET     /bo/api/services/top10                                controllers.BackOfficeController.mostCalledServices()
GET     /bo/api/services/map                                  controllers.BackOfficeController.servicesMap()
DELETE  /bo/api/services/:id/circuitbreakers                  controllers.BackOfficeController.resetCircuitBreakers(id)

GET     /bo/api/bodies/:serviceId/:requestId                  controllers.BackOfficeController.fetchBodiesFor(serviceId, requestId)

POST    /bo/api/certificates/_data                            controllers.BackOfficeController.certificateData()
POST    /bo/api/certificates/_valid                           controllers.BackOfficeController.certificateIsValid()
POST    /bo/api/certificates/_selfSigned                      controllers.BackOfficeController.selfSignedCert()
POST    /bo/api/certificates/_selfSignedClient                controllers.BackOfficeController.selfSignedClientCert()
POST    /bo/api/certificates/_caSigned                        controllers.BackOfficeController.caSignedCert()
POST    /bo/api/certificates/_caSignedClient                  controllers.BackOfficeController.caSignedClientCert()
POST    /bo/api/certificates/_ca                              controllers.BackOfficeController.caCert()
POST    /bo/api/certificates/:id/_renew                       controllers.BackOfficeController.renew(id)
POST    /bo/api/certificates/_letsencrypt                     controllers.BackOfficeController.createLetsEncryptCertificate()
POST    /bo/api/certificates/_importP12                       controllers.BackOfficeController.importP12File()
POST    /bo/api/certificates/_createCertificate               controllers.BackOfficeController.createCertificate()
POST    /bo/api/certificates/_createCSR                       controllers.BackOfficeController.createCsr()


POST    /bo/api/oidc/_fetchConfig                            controllers.BackOfficeController.fetchOpenIdConfiguration()

# Admin API proxy
GET     /bo/api/proxy/*path                                   controllers.BackOfficeController.proxyAdminApi(path)
POST    /bo/api/proxy/*path                                   controllers.BackOfficeController.proxyAdminApi(path)
PUT     /bo/api/proxy/*path                                   controllers.BackOfficeController.proxyAdminApi(path)
DELETE  /bo/api/proxy/*path                                   controllers.BackOfficeController.proxyAdminApi(path)
PATCH   /bo/api/proxy/*path                                   controllers.BackOfficeController.proxyAdminApi(path)
HEAD    /bo/api/proxy/*path                                   controllers.BackOfficeController.proxyAdminApi(path)
OPTIONS /bo/api/proxy/*path                                   controllers.BackOfficeController.proxyAdminApi(path)

# Private Apps URLs
GET     /privateapps/error                                    controllers.PrivateAppsController.error(message: Option[String])
GET     /privateapps/home                                     controllers.PrivateAppsController.home
GET     /privateapps/redirect                                 controllers.PrivateAppsController.redirect

DELETE  /privateapps/registration                             controllers.PrivateAppsController.selfRegistrationDelete()
POST    /privateapps/register/start                           controllers.PrivateAppsController.selfRegistrationStart()
POST    /privateapps/register/finish                          controllers.PrivateAppsController.selfRegistrationFinish()
GET     /privateapps/profile                                  controllers.PrivateAppsController.selfUpdateProfilePage()
POST    /privateapps/profile                                  controllers.PrivateAppsController.selfUpdateProfile()
POST    /api/privateapps/sessions/send/:id/:username          controllers.PrivateAppsController.sendSelfUpdateLink(id, username)
POST    /api/privateapps/sessions/:id/:username               controllers.PrivateAppsController.registerSession(id, username)

OPTIONS /privateapps/generic/login                            controllers.AuthController.confidentialAppLoginPageOptions()
GET     /privateapps/generic/login                            controllers.AuthController.confidentialAppLoginPage()
GET     /privateapps/generic/logout                           controllers.AuthController.confidentialAppLogout()
GET     /privateapps/generic/callback                         controllers.AuthController.confidentialAppCallback()
POST    /privateapps/generic/callback                         controllers.AuthController.confidentialAppCallback()


GET     /backoffice/auth0/login                               controllers.AuthController.backOfficeLogin()
GET     /backoffice/auth0/logout                              controllers.AuthController.backOfficeLogout()
GET     /backoffice/auth0/callback                            controllers.AuthController.backOfficeCallback(error: Option[String], error_description: Option[String])
POST    /backoffice/auth0/callback                            controllers.AuthController.backOfficeCallback(error: Option[String], error_description: Option[String])

# Admin API

## new models
GET     /api/new/apikey                                       controllers.TemplatesController.initiateApiKey(groupId: Option[String])
GET     /api/new/service                                      controllers.TemplatesController.initiateService()
GET     /api/new/tcp/service                                  controllers.TemplatesController.initiateTcpService()
GET     /api/new/group                                        controllers.TemplatesController.initiateServiceGroup()


# Create entity from template
POST    /api/:entity/_template                                controllers.TemplatesController.createFromTemplate(entity)
POST    /api/tcp/services                                     controllers.TemplatesController.createFromTemplate(entity = "tcp/services")
POST    /api/admins/simple                                    controllers.TemplatesController.createFromTemplate(entity = "admins/simple")
POST    /api/admins/webauthn                                  controllers.TemplatesController.createFromTemplate(entity = "admins/webauthn")

## ApiKeys
GET     /api/services/:serviceId/apikeys/:clientId/quotas     controllers.ApiController.apiKeyQuotas(serviceId, clientId)
DELETE  /api/services/:serviceId/apikeys/:clientId/quotas     controllers.ApiController.resetApiKeyQuotas(serviceId, clientId)
GET     /api/services/:serviceId/apikeys/:clientId/group      controllers.ApiController.apiKeyGroup(serviceId, clientId)
PUT     /api/services/:serviceId/apikeys/:clientId/group      controllers.ApiController.updateApiKeyGroup(serviceId, clientId)
GET     /api/services/:serviceId/apikeys/:clientId            controllers.ApiController.apiKey(serviceId, clientId)
PUT     /api/services/:serviceId/apikeys/:clientId            controllers.ApiController.updateApiKey(serviceId, clientId)
PATCH   /api/services/:serviceId/apikeys/:clientId            controllers.ApiController.patchApiKey(serviceId, clientId)
DELETE  /api/services/:serviceId/apikeys/:clientId            controllers.ApiController.deleteApiKey(serviceId, clientId)
POST    /api/services/:serviceId/apikeys                      controllers.ApiController.createApiKey(serviceId)
GET     /api/services/:serviceId/apikeys                      controllers.ApiController.apiKeys(serviceId)

GET     /api/groups/:groupId/apikeys/:clientId/quotas         controllers.ApiController.apiKeyFromGroupQuotas(groupId, clientId)
DELETE  /api/groups/:groupId/apikeys/:clientId/quotas         controllers.ApiController.resetApiKeyFromGroupQuotas(groupId, clientId)
GET     /api/groups/:groupId/apikeys/:clientId                controllers.ApiController.apiKeyFromGroup(groupId, clientId)
PUT     /api/groups/:groupId/apikeys/:clientId                controllers.ApiController.updateApiKeyFromGroup(groupId, clientId)
PATCH   /api/groups/:groupId/apikeys/:clientId                controllers.ApiController.patchApiKeyFromGroup(groupId, clientId)
DELETE  /api/groups/:groupId/apikeys/:clientId                controllers.ApiController.deleteApiKeyFromGroup(groupId, clientId)
POST    /api/groups/:groupId/apikeys                          controllers.ApiController.createApiKeyFromGroup(groupId)
GET     /api/groups/:groupId/apikeys                          controllers.ApiController.apiKeysFromGroup(groupId)
GET     /api/apikeys/_template                                controllers.TemplatesController.initiateApiKey(groupId: Option[String])
GET     /api/apikeys                                          controllers.ApiController.allApiKeys()

## Services
GET     /api/services/_template                               controllers.TemplatesController.initiateService()
GET     /api/services/:serviceId/template                     controllers.ApiController.serviceTemplate(serviceId)
PUT     /api/services/:serviceId/template                     controllers.ApiController.updateServiceTemplate(serviceId)
POST    /api/services/:serviceId/template                     controllers.ApiController.createServiceTemplate(serviceId)
DELETE  /api/services/:serviceId/template                     controllers.ApiController.deleteServiceTemplate(serviceId)
GET     /api/services/:serviceId/targets                      controllers.ApiController.serviceTargets(serviceId)
POST    /api/services/:serviceId/targets                      controllers.ApiController.serviceAddTarget(serviceId)
DELETE  /api/services/:serviceId/targets                      controllers.ApiController.serviceDeleteTarget(serviceId)
PATCH   /api/services/:serviceId/targets                      controllers.ApiController.updateServiceTargets(serviceId)
GET     /api/services/:serviceId/live                         controllers.ApiController.serviceLiveStats(serviceId, every: Option[Int])
GET     /api/services/:serviceId/stats                        controllers.AnalyticsController.serviceStats(serviceId, from: Option[String], to: Option[String])
GET     /api/services/:serviceId/events                       controllers.AnalyticsController.serviceEvents(serviceId, from: Option[String], to: Option[String])
GET     /api/services/:serviceId/health                       controllers.ApiController.serviceHealth(serviceId)
GET     /api/services/:serviceId/canary                       controllers.ApiController.serviceCanaryMembers(serviceId)
DELETE  /api/services/:serviceId/canary                       controllers.ApiController.resetServiceCanaryMembers(serviceId)
GET     /api/services/:serviceId                              controllers.ApiController.service(serviceId)
PUT     /api/services/:serviceId                              controllers.ApiController.updateService(serviceId)
PATCH   /api/services/:serviceId                              controllers.ApiController.patchService(serviceId)
DELETE  /api/services/:serviceId                              controllers.ApiController.deleteService(serviceId)
GET     /api/services                                         controllers.ApiController.allServices()
POST    /api/services                                         controllers.ApiController.createService()

## ServiceGroup
GET     /api/groups/_template                                 controllers.TemplatesController.initiateServiceGroup()
GET     /api/groups/:serviceGroupId/services                  controllers.ApiController.serviceGroupServices(serviceGroupId)
GET     /api/groups/:serviceGroupId                           controllers.ApiController.serviceGroup(serviceGroupId)
DELETE  /api/groups/:serviceGroupId                           controllers.ApiController.deleteGroup(serviceGroupId)
PUT     /api/groups/:serviceGroupId                           controllers.ApiController.updateGroup(serviceGroupId)
PATCH   /api/groups/:serviceGroupId                           controllers.ApiController.patchGroup(serviceGroupId)
GET     /api/groups                                           controllers.ApiController.allServiceGroups()
POST    /api/groups                                           controllers.ApiController.createGroup()

## Certificates
GET     /api/certificates/_template                           controllers.TemplatesController.initiateCertificate()
POST    /api/certificates/:certId/_renew                      controllers.ApiController.renewCert(certId)
GET     /api/certificates/:certId                             controllers.ApiController.oneCert(certId)
DELETE  /api/certificates/:certId                             controllers.ApiController.deleteCert(certId)
PUT     /api/certificates/:certId                             controllers.ApiController.updateCert(certId)
PATCH   /api/certificates/:certId                             controllers.ApiController.patchCert(certId)
GET     /api/certificates                                     controllers.ApiController.allCerts()
POST    /api/certificates                                     controllers.ApiController.createCert()

POST    /api/pki/keys                                         controllers.PkiController.genKeyPair()
POST    /api/pki/cas                                          controllers.PkiController.genSelfSignedCA()
POST    /api/pki/certs/_letencrypt                            controllers.PkiController.genLetsEncryptCert()
POST    /api/pki/certs/_p12                                   controllers.PkiController.importCertFromP12()
POST    /api/pki/certs/_valid                                 controllers.PkiController.certificateIsValid()
POST    /api/pki/certs/_data                                  controllers.PkiController.certificateData()
POST    /api/pki/certs                                        controllers.PkiController.genSelfSignedCert()
POST    /api/pki/csrs                                         controllers.PkiController.genCsr()
POST    /api/pki/cas/:ca/certs/_sign                          controllers.PkiController.signCert(ca)
POST    /api/pki/cas/:ca/certs                                controllers.PkiController.genCert(ca)
POST    /api/pki/cas/:ca/cas                                  controllers.PkiController.genSubCA(ca)

GET     /api/lines/:line/services                             controllers.ApiController.servicesForALine(line)
GET     /api/lines                                            controllers.ApiController.allLines()

GET     /api/live/host                                        controllers.ApiController.hostMetrics()
GET     /api/live/:id                                         controllers.ApiController.serviceLiveStats(id, every: Option[Int])
GET     /api/live                                             controllers.ApiController.globalLiveStats()

GET     /api/globalconfig/_template                           controllers.TemplatesController.initiateGlobalConfig()
GET     /api/globalconfig                                     controllers.ApiController.globalConfig()
PUT     /api/globalconfig                                     controllers.ApiController.updateGlobalConfig()
PATCH   /api/globalconfig                                     controllers.ApiController.patchGlobalConfig()

GET     /api/otoroshi.json                                    controllers.ApiController.fullExport()
POST    /api/otoroshi.json                                    controllers.ApiController.fullImport()
POST    /api/import                                           controllers.ApiController.fullImportFromFile()

POST    /api/snowmonkey/_start                                controllers.ApiController.startSnowMonkey()
POST    /api/snowmonkey/_stop                                 controllers.ApiController.stopSnowMonkey()
DELETE  /api/snowmonkey/outages                               controllers.ApiController.resetSnowMonkey()
GET     /api/snowmonkey/outages                               controllers.ApiController.getSnowMonkeyOutages()
GET     /api/snowmonkey/config                                controllers.ApiController.getSnowMonkeyConfig()
PUT     /api/snowmonkey/config                                controllers.ApiController.updateSnowMonkey()
PATCH   /api/snowmonkey/config                                controllers.ApiController.patchSnowMonkey()

GET     /api/verifiers/_template                              controllers.TemplatesController.initiateJwtVerifier()
GET     /api/verifiers/:id                                    controllers.ApiController.findGlobalJwtVerifiersById(id)
DELETE  /api/verifiers/:id                                    controllers.ApiController.deleteGlobalJwtVerifier(id)
PUT     /api/verifiers/:id                                    controllers.ApiController.updateGlobalJwtVerifier(id)
PATCH   /api/verifiers/:id                                    controllers.ApiController.patchGlobalJwtVerifier(id)
GET     /api/verifiers                                        controllers.ApiController.findAllGlobalJwtVerifiers()
POST    /api/verifiers                                        controllers.ApiController.createGlobalJwtVerifier()

GET     /api/client-validators/:id                            ssl.ClientValidatorsController.findClientValidatorById(id)
DELETE  /api/client-validators/:id                            ssl.ClientValidatorsController.deleteClientValidator(id)
PUT     /api/client-validators/:id                            ssl.ClientValidatorsController.updateClientValidator(id)
PATCH   /api/client-validators/:id                            ssl.ClientValidatorsController.patchClientValidator(id)
GET     /api/client-validators                                ssl.ClientValidatorsController.findAllClientValidators()
POST    /api/client-validators                                ssl.ClientValidatorsController.createClientValidator()

GET     /api/auths/_template                                  controllers.TemplatesController.initiateAuthModule()
POST    /api/auths/:id/register/start                         controllers.ApiController.startRegistration(id)
POST    /api/auths/:id/register/finish                        controllers.ApiController.finishRegistration(id)
GET     /api/auths/:id                                        controllers.ApiController.findGlobalAuthModuleById(id)
DELETE  /api/auths/:id                                        controllers.ApiController.deleteGlobalAuthModule(id)
PUT     /api/auths/:id                                        controllers.ApiController.updateGlobalAuthModule(id)
PATCH   /api/auths/:id                                        controllers.ApiController.patchGlobalAuthModule(id)
GET     /api/auths                                            controllers.ApiController.findAllGlobalAuthModules()
POST    /api/auths                                            controllers.ApiController.createGlobalAuthModule()

GET     /api/cluster/sessions/:id                             cluster.ClusterController.isSessionValid(id)
POST    /api/cluster/sessions                                 cluster.ClusterController.createSession()
PUT     /api/cluster/quotas                                   cluster.ClusterController.updateQuotas()
GET     /api/cluster/state                                    cluster.ClusterController.internalState()
GET     /api/cluster/members                                  cluster.ClusterController.getClusterMembers()
DELETE  /api/cluster/members                                  cluster.ClusterController.clearClusterMembers()
GET     /api/cluster/live                                     cluster.ClusterController.liveCluster()

GET     /api/scripts/_template                                controllers.TemplatesController.initiateScript()
GET     /api/scripts/_list                                    otoroshi.script.ScriptApiController.findAllScriptsList()
GET     /api/scripts/:id                                      otoroshi.script.ScriptApiController.findScriptById(id)
PUT     /api/scripts/:id                                      otoroshi.script.ScriptApiController.updateScript(id)
PATCH   /api/scripts/:id                                      otoroshi.script.ScriptApiController.patchScript(id)
DELETE  /api/scripts/:id                                      otoroshi.script.ScriptApiController.deleteScript(id)
POST    /api/scripts/_compile                                 otoroshi.script.ScriptApiController.compileScript()
POST    /api/scripts                                          otoroshi.script.ScriptApiController.createScript()
GET     /api/scripts                                          otoroshi.script.ScriptApiController.findAllScripts()

GET     /api/tcp/_template                                    controllers.TemplatesController.initiateTcpService()
GET     /api/tcp/services/:id                                 otoroshi.tcp.TcpServiceApiController.findTcpServiceById(id)
PUT     /api/tcp/services/:id                                 otoroshi.tcp.TcpServiceApiController.updateTcpService(id)
PATCH   /api/tcp/services/:id                                 otoroshi.tcp.TcpServiceApiController.patchTcpService(id)
DELETE  /api/tcp/services/:id                                 otoroshi.tcp.TcpServiceApiController.deleteTcpService(id)
POST    /api/tcp/services                                     otoroshi.tcp.TcpServiceApiController.createTcpService()
GET     /api/tcp/services                                     otoroshi.tcp.TcpServiceApiController.findAllTcpServices()

GET     /api/stats/global                                     controllers.AnalyticsController.globalStats(from: Option[String], to: Option[String])
GET     /api/stats                                            controllers.AnalyticsController.filterableStats(from: Option[String], to: Option[String])
GET     /api/events                                           controllers.AnalyticsController.filterableEvents(from: Option[String], to: Option[String])

GET     /api/admin-sessions                                   controllers.UsersController.sessions()
DELETE  /api/admin-sessions/:id                               controllers.UsersController.discardSession(id)
DELETE  /api/admin-sessions                                   controllers.UsersController.discardAllSessions()

GET     /api/apps-sessions                                    controllers.UsersController.privateAppsSessions()
DELETE  /api/apps-sessions/:id                                controllers.UsersController.discardPrivateAppsSession(id)
DELETE  /api/apps-sessions                                    controllers.UsersController.discardAllPrivateAppsSessions()

GET     /api/audit/events                                     controllers.UsersController.auditEvents()

GET     /api/alert/events                                     controllers.UsersController.alertEvents()

GET     /api/admins/simple/_template                          controllers.TemplatesController.initiateSimpleAdmin()
POST    /api/admins/simple                                    controllers.UsersController.registerSimpleAdmin()
GET     /api/admins/simple                                    controllers.UsersController.simpleAdmins()
DELETE  /api/admins/simple/:username                          controllers.UsersController.deleteAdmin(username)

GET     /api/admins/webauthn/_template                        controllers.TemplatesController.initiateWebauthnAdmin()
GET     /api/admins/webauthn                                  controllers.UsersController.webAuthnAdmins()
POST    /api/admins/webauthn                                  controllers.UsersController.registerWebAuthnAdmin()
DELETE  /api/admins/webauthn/:username/:id                    controllers.UsersController.webAuthnDeleteAdmin(username, id)

GET     /api/swagger.json                                     controllers.SwaggerController.swagger()
GET     /api/swagger/ui                                       controllers.SwaggerController.swaggerUi()

########################################################################################################################

GET     /assets/*file                                         controllers.Assets.versioned(path="/public", file: Asset)
GET     /__otoroshi_assets/*file                              controllers.Assets.versioned(path="/public", file: Asset)
GET     /docs/*file                                           controllers.Assets.at(path="/public/docs", file)
