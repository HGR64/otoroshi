include "base.conf"

app {
  storage = "inmemory"
  storage = ${?APP_STORAGE}
  storageRoot = "otoroshi"
  storageRoot = ${?APP_STORAGE_ROOT}
  eventsName = "otoroshi"
  eventsName = ${?APP_EVENTS_NAME}
  importFrom = ${?APP_IMPORT_FROM}
  env = "prod"
  env = ${?APP_ENV}
  redirectToDev = false
  domain = "foo.bar"
  domain = ${?APP_DOMAIN}
  commitId = "HEAD"
  commitId = ${?COMMIT_ID}
  rootScheme = "http"
  rootScheme = ${?APP_ROOT_SCHEME}
  middleFingers = false
  middleFingers = ${?APP_MIDDLE_FINGERS}
  workers = 30
  workers = ${?APP_WORKERS}
  useCache = false
  useCache = ${?USE_CACHE}
  throttlingWindow = 10
  throttlingWindow = ${?THROTTLING_WINDOW}
  checkForUpdates = true
  checkForUpdates = ${?CHECK_FOR_UPDATES}
  overheadThreshold = 500.0
  overheadThreshold = ${?OVERHEAD_THRESHOLD}
  proxy {
    keepAlive = true
    keepAlive = ${?PROXY_KEEPALIVE}
    compressionEnabled = false
    compressionEnabled = ${?PROXY_COMPRESSION_ENABLED}
    idleTimeout = 120000
    idleTimeout = ${?PROXY_IDLE_TIMEOUT}
    connectionTimeout = 120000
    connectionTimeout = ${?PROXY_CONNECTION_TIMEOUT}
  }
  sidecar {
    serviceId = ${?SIDECAR_SERVICE_ID}
    target = ${?SIDECAR_TARGET}
    from = "127.0.0.1"
    from = ${?SIDECAR_FROM}
    strict = true
    strict = ${?SIDECAR_STRICT}
    apikey {
      clientId = ${?SIDECAR_APIKEY_CLIENT_ID}
    }
  }
  health {
    limit = 1000
    limit = ${?HEALTH_LIMIT}
    accessKey = ${?HEALTH_ACCESS_KEY}
  }
  snowflake {
    seed = 0
    seed = ${?INSTANCE_NUMBER}
  }
  events {
    maxSize = 1000
    maxSize = ${?MAX_EVENTS_SIZE}
  }
  backoffice {
    exposed = true
    exposed = ${?APP_BACKOFFICE_EXPOSED}
    subdomain = "otoroshi"
    subdomain = ${?APP_BACKOFFICE_SUBDOMAIN}
    session {
      exp = 86400000
      exp = ${?APP_BACKOFFICE_SESSION_EXP}
    }
  }
  privateapps {
    subdomain = "privateapps"
    subdomain = ${?APP_PRIVATEAPPS_SUBDOMAIN}
    port = ${?APP_PRIVATEAPPS_PORT}
    session {
      exp = 86400000
      exp = ${?APP_PRIVATEAPPS_SESSION_EXP}
    }
  }
  adminapi {
    exposed = true
    exposed = ${?ADMIN_API_EXPOSED}
    targetSubdomain = "otoroshi-admin-internal-api"
    targetSubdomain = ${?ADMIN_API_TARGET_SUBDOMAIN}
    exposedSubdomain = "otoroshi-api"
    exposedSubdomain = ${?ADMIN_API_EXPOSED_SUBDOMAIN}
    defaultValues {
      backOfficeGroupId = "admin-api-group"
      backOfficeGroupId = ${?ADMIN_API_GROUP}
      backOfficeApiKeyClientId = "admin-api-apikey-id"
      backOfficeApiKeyClientId = ${?ADMIN_API_CLIENT_ID}
      backOfficeApiKeyClientSecret = "admin-api-apikey-secret"
      backOfficeApiKeyClientSecret = ${?ADMIN_API_CLIENT_SECRET}
      backOfficeServiceId = "admin-api-service"
      backOfficeServiceId = ${?ADMIN_API_SERVICE_ID}
    }
    proxy {
      https = false
      https = ${?ADMIN_API_HTTPS}
      local = true
      local = ${?ADMIN_API_LOCAL}
    }
  }
  claim {
    sharedKey = "secret"
    sharedKey = ${?CLAIM_SHAREDKEY}
  }
  webhooks {
    size = 100
    size = ${?WEBHOOK_SIZE}
  }
  redis {
    host = "localhost"
    host = ${?REDIS_HOST}
    port = 6379
    port = ${?REDIS_PORT}
    password = ${?REDIS_PASSWORD}
    windowSize = 99
    windowSize = ${?REDIS_WINDOW_SIZE}
    slaves = []
    useScan = false
    useScan =  ${?REDIS_USE_SCAN}
  }
  inmemory {
    windowSize = 99
    windowSize = ${?INMEMORY_WINDOW_SIZE}
    experimental = false
    experimental = ${?INMEMORY_EXPERIMENTAL_STORE}
  }
  leveldb {
    windowSize = 99
    windowSize = ${?LEVELDB_WINDOW_SIZE}
    path = "./leveldb"
    path = ${?LEVELDB_PATH}
  }
  cassandra {
    windowSize = 99
    windowSize = ${?CASSANDRA_WINDOW_SIZE}
    hosts = "127.0.0.1"
    hosts = ${?CASSANDRA_HOSTS}
    host = "127.0.0.1"
    host = ${?CASSANDRA_HOST}
    port = 9042
    port = ${?CASSANDRA_PORT}
    replicationFactor = 1
    replicationFactor = ${?CASSANDRA_REPLICATION_FACTOR}
    username = ${?CASSANDRA_USERNAME}
    password = ${?CASSANDRA_PASSWORD}
  }
  mongo {
    uri = "mongodb://localhost:27017/default"
    uri = ${?MONGO_URI}
    windowSize = 99
    windowSize = ${?CASSANDRA_WINDOW_SIZE}
  }
  kafka {
    host = "127.0.0.1"
    host = ${?KAFKA_HOST}
    port = "9092"
    port = ${?KAFKA_PORT}
    servers = ${app.kafka.host}":"${app.kafka.port}
    servers = ${?KAFKA_HOSTS_AND_PORTS}
    groupId = "otoroshi"
    nbPartitions = 3
    nbPartitions = ${?KAFKA_NB_PARTITIONS}
    keyPass = ${?KAFKA_PASSWORD}
    keystore {
      location = ${?KAFKA_KEYSTORE_LOCATION}
    }
    truststore {
      location = ${?KAFKA_TRUSTORE_LOCATION}
    }
  }
  actorsystems {
    otoroshi {
      akka {
        log-dead-letters-during-shutdown = false
        jvm-exit-on-fatal-error = false
        default-dispatcher {
          type = Dispatcher
          executor = "fork-join-executor"
          fork-join-executor {
            parallelism-factor = 4.0
            parallelism-min = 4
            parallelism-max = 64
            task-peeking-mode = "FIFO"
          }
          throughput = 1
        }
      }
    }
    datastore {
      akka {
        log-dead-letters-during-shutdown = false
        jvm-exit-on-fatal-error = false
        default-dispatcher {
          type = Dispatcher
          executor = "fork-join-executor"
          fork-join-executor {
            parallelism-factor = 4.0
            parallelism-min = 4
            parallelism-max = 64
            task-peeking-mode = "FIFO"
          }
          throughput = 1
        }
      }
    }
  }
}

otoroshi {
  cluster {
    mode = "off"
    mode = ${?CLUSTER_MODE}
    leader {
      urls = ["http://otoroshi-api.foo.bar:8080"]
      host = "otoroshi-api.foo.bar"
      host = ${?CLUSTER_LEADER_HOST}
      clientId = "admin-api-apikey-id"
      clientId = ${?CLUSTER_LEADER_CLIENT_ID}
      clientSecret = "admin-api-apikey-secret"
      clientSecret = ${?CLUSTER_LEADER_CLIENT_SECRET}
      groupingBy = 50
    }
    worker {
      state {
        pollEvery = 10000
        pollEvery = ${?CLUSTER_WORKER_POLL_EVERY}
      }
      quotas {
        pushEvery = 2000
        pushEvery = ${?CLUSTER_WORKER_PUSH_EVERY}
      }
    }
  }
  headers {
    trace.label = "Otoroshi-Viz-From-Label"
    trace.from = "Otoroshi-Viz-From"
    trace.parent = "Otoroshi-Parent-Request"
    request.adminprofile = "Otoroshi-Admin-Profile"
    request.simpleapiclientid = "x-api-key"
    request.clientid = "Otoroshi-Client-Id"
    request.clientsecret = "Otoroshi-Client-Secret"
    request.id = "Otoroshi-Request-Id"
    request.timestamp = "Otoroshi-Request-Timestamp"
    request.bearer = "Otoroshi-Token"
    request.authorization = "Otoroshi-Authorization"
    response.proxyhost = "Otoroshi-Proxied-Host"
    response.error = "Otoroshi-Error"
    response.errormsg = "Otoroshi-Error-Msg"
    response.proxylatency = "Otoroshi-Proxy-Latency"
    response.upstreamlatency = "Otoroshi-Upstream-Latency"
    response.dailyquota = "Otoroshi-Daily-Calls-Remaining"
    response.monthlyquota = "Otoroshi-Monthly-Calls-Remaining"
    comm.state = "Otoroshi-State"
    comm.stateresp = "Otoroshi-State-Resp"
    comm.claim = "Otoroshi-Claim"
    healthcheck.test = "Otoroshi-Health-Check-Logic-Test"
    healthcheck.testresult = "Otoroshi-Health-Check-Logic-Test-Result"
    jwt.issuer = "Otoroshi"
    canary.tracker = "Otoroshi-Canary-Id"

    request.jwtAuthorization = "access_token"
    request.bearerAuthorization = "bearer_auth"
    request.basicAuthorization = "basic_auth"
  }
}
