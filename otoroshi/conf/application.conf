include "base.conf"

app {
  storage = "inmemory"
  storage = ${?APP_STORAGE}
  storageRoot = "otoroshi"
  storageRoot = ${?APP_STORAGE_ROOT}
  eventsName = "otoroshi"
  eventsName = ${?APP_EVENTS_NAME}
  importFrom = ${?APP_IMPORT_FROM}
  env = "prod"
  env = ${?APP_ENV}
  redirectToDev = false
  domain = "foo.bar"
  domain = ${?APP_DOMAIN}
  commitId = "HEAD"
  commitId = ${?COMMIT_ID}
  rootScheme = "http"
  rootScheme = ${?APP_ROOT_SCHEME}
  middleFingers = false
  middleFingers = ${?APP_MIDDLE_FINGERS}
  workers = 30
  workers = ${?APP_WORKERS}
  useCache = false
  useCache = ${?USE_CACHE}
  userMeta = "otoroshi_data"
  snowflake {
    seed = 0
    seed = ${?INSTANCE_NUMBER}
  }
  events {
    maxSize = 1000
    maxSize = ${?MAX_EVENTS_SIZE}
  }
  backoffice {
    subdomain = "otoroshi"
    subdomain = ${?APP_BACKOFFICE_SUBDOMAIN}
    session {
      exp = 86400000
      exp = ${?APP_BACKOFFICE_SESSION_EXP}
    }
  }
  privateapps {
    subdomain = "privateapps"
    subdomain = ${?APP_PRIVATEAPPS_SUBDOMAIN}
    session {
      exp = 86400000
      exp = ${?APP_PRIVATEAPPS_SESSION_EXP}
    }
  }
  adminapi {
    targetSubdomain = "otoroshi-admin-internal-api"
    targetSubdomain = ${?ADMIN_API_TARGET_SUBDOMAIN}
    exposedDubdomain = "otoroshi-api"
    exposedDubdomain = ${?ADMIN_API_EXPOSED_SUBDOMAIN}
    defaultValues {
      backOfficeGroupId = "admin-api-group"
      backOfficeGroupId = ${?ADMIN_API_GROUP}
      backOfficeApiKeyClientId = "admin-api-apikey-id"
      backOfficeApiKeyClientId = ${?ADMIN_API_CLIENT_ID}
      backOfficeApiKeyClientSecret = "admin-api-apikey-secret"
      backOfficeApiKeyClientSecret = ${?ADMIN_API_CLIENT_SECRET}
      backOfficeServiceId = "admin-api-service"
      backOfficeServiceId = ${?ADMIN_API_SERVICE_ID}
    }
    proxy {
      https = false
      https = ${?ADMIN_API_HTTPS}
      local = true
      local = ${?ADMIN_API_LOCAL}
    }
  }
  claim {
    sharedKey = "secret"
    sharedKey = ${?CLAIM_SHAREDKEY}
  }
  webhooks {
    size = 100
    size = ${?WEBHOOK_SIZE}
  }
  redis {
    host = "localhost"
    host = ${?REDIS_HOST}
    port = 6379
    port = ${?REDIS_PORT}
    password = ${?REDIS_PASSWORD}
    windowSize = 99
    windowSize = ${?REDIS_WINDOW_SIZE}
    slaves = []
    useScan = false
    useScan =  ${?REDIS_USE_SCAN}
  }
  inmemory {
    windowSize = 99
    windowSize = ${?INMEMORY_WINDOW_SIZE}
  }
  leveldb {
    windowSize = 99
    windowSize = ${?LEVELDB_WINDOW_SIZE}
    path = "./leveldb"
    path = ${?LEVELDB_PATH}
  }
  cassandra {
    windowSize = 99
    windowSize = ${?CASSANDRA_WINDOW_SIZE}
    hosts = "127.0.0.1"
    hosts = ${?CASSANDRA_HOSTS}
    host = "127.0.0.1"
    host = ${?CASSANDRA_HOST}
    port = 9042
    port = ${?CASSANDRA_PORT}
  }
  kafka {
    host = "127.0.0.1"
    host = ${?KAFKA_HOST}
    port = "9092"
    port = ${?KAFKA_PORT}
    servers = ${app.kafka.host}":"${app.kafka.port}
    servers = ${?KAFKA_HOSTS_AND_PORTS}
    groupId = "otoroshi"
    nbPartitions = 3
    nbPartitions = ${?KAFKA_NB_PARTITIONS}
    keyPass = ${?KAFKA_PASSWORD}
    keystore {
      location = ${?KAFKA_KEYSTORE_LOCATION}
    }
    truststore {
      location = ${?KAFKA_TRUSTORE_LOCATION}
    }
  }
  actorsystems {
    gateway {
      akka {
        jvm-exit-on-fatal-error = false
        default-dispatcher {
          type = Dispatcher
          executor = "fork-join-executor"
          fork-join-executor {
            parallelism-factor = 4.0
            parallelism-min = 4
            parallelism-max = 64
            task-peeking-mode = "FIFO"
          }
          throughput = 1
        }
      }
    }
    internal {
      jvm-exit-on-fatal-error = false
      default-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-factor = 4.0
          parallelism-min = 4
          parallelism-max = 64
          task-peeking-mode = "FIFO"
        }
        throughput = 1
      }
    }

    websockets {
      jvm-exit-on-fatal-error = false
      default-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-factor = 4.0
          parallelism-min = 4
          parallelism-max = 64
          task-peeking-mode = "FIFO"
        }
        throughput = 1
      }
    }
    gateway {
      jvm-exit-on-fatal-error = false
      default-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-factor = 4.0
          parallelism-min = 4
          parallelism-max = 64
          task-peeking-mode = "FIFO"
        }
        throughput = 1
      }
    }
    kafka {
      jvm-exit-on-fatal-error = false
      default-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-factor = 4.0
          parallelism-min = 4
          parallelism-max = 64
          task-peeking-mode = "FIFO"
        }
        throughput = 1
      }
    }
    statsd {
      jvm-exit-on-fatal-error = false
      default-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-factor = 4.0
          parallelism-min = 4
          parallelism-max = 64
          task-peeking-mode = "FIFO"
        }
        throughput = 1
      }
    }
    cassandra {
      jvm-exit-on-fatal-error = false
      default-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-factor = 4.0
          parallelism-min = 4
          parallelism-max = 64
          task-peeking-mode = "FIFO"
        }
        throughput = 1
      }
    }
    inmemory {
      jvm-exit-on-fatal-error = false
      default-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-factor = 4.0
          parallelism-min = 4
          parallelism-max = 64
          task-peeking-mode = "FIFO"
        }
        throughput = 1
      }
    }
    leveldb {
      jvm-exit-on-fatal-error = false
      default-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-factor = 4.0
          parallelism-min = 4
          parallelism-max = 64
          task-peeking-mode = "FIFO"
        }
        throughput = 1
      }
    }
    redis {
      jvm-exit-on-fatal-error = false
      default-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-factor = 4.0
          parallelism-min = 4
          parallelism-max = 64
          task-peeking-mode = "FIFO"
        }
        throughput = 1
      }
    }
  }
}

otoroshi {
  headers {
    trace.label = "Otoroshi-Viz-From-Label"
    trace.from = "Otoroshi-Viz-From"
    trace.parent = "Otoroshi-Parent-Request"
    request.adminprofile = "Otoroshi-Admin-Profile"
    request.clientid = "Otoroshi-Client-Id"
    request.clientsecret = "Otoroshi-Client-Secret"
    request.id = "Otoroshi-Request-Id"
    response.proxyhost = "Otoroshi-Proxied-Host"
    response.error = "Otoroshi-Error"
    response.errormsg = "Otoroshi-Error-Msg"
    response.proxylatency = "Otoroshi-Proxy-Latency"
    response.upstreamlatency = "Otoroshi-Upstream-Latency"
    response.dailyquota = "Otoroshi-Daily-Calls-Remaining"
    response.monthlyquota = "Otoroshi-Monthly-Calls-Remaining"
    comm.state = "Otoroshi-State"
    comm.stateresp = "Otoroshi-State-Resp"
    comm.claim = "Otoroshi-Claim"
    healthcheck.test = "Otoroshi-Health-Check-Logic-Test"
    healthcheck.testresult = "Otoroshi-Health-Check-Logic-Test-Result"
    jwt.issuer = "Otoroshi"
    canary.tracker = "Otoroshi-Canary-Id"
  }
}
